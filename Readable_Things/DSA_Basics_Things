ðŸ‘‰StringBuilder
 StringBuilder str = new StringBuilder();

 str.append("GFG");

 System.out.println("String2 capacity = "+ str2.capacity());

 str.insert(6, "beautiful ");

 str.reverse();
 
 str.isEmpty();

--------------------------------------------------------------------------------------------  
ðŸ‘‰Stack

 Stack<Integer> st = new Stack<>();

 st.push(1)

 stack.peek()  --- top element

 st.pop()


 Integer pos = (Integer) st.search(element);
  if(pos == -1)
    System.out.println("Element not found");
  else
    System.out.println("Element is found at position: " + pos);

 st.empty()
--------------------------------------------------------------------------------------------  
ðŸ‘‰Deque

 Deque<Character> stack = new ArrayDeque<Character>();
        stack.push('A');
        stack.push('B');
        System.out.println(stack.peek());
        System.out.println(stack.pop());
        `
stack.isEmpty()        


--------------------------------------------------------------------------------------------         
ðŸ‘‰ArrayList

 ArrayList<Integer> arr1 = new ArrayList<Integer>(n);
                     
                     or

 ArrayList<Integer> arr1 = new ArrayList<>();

 arr1.add(1);

 ArrayList<String> al = new ArrayList<>();

 al.add(1, "Geeks");

 al.remove(1);

 al.isEmpty()

--------------------------------------------------------------------------------------------        
ðŸ‘‰HashSet
duplicate values are not allowed.
Objects that you insert in HashSet are not guaranteed to be inserted in the same order
Objects are inserted based on their hash code.

HashSet<String> h = new HashSet<String>();

h.add("India");

h.add("India");   // it is not store in HashSet

h.contains("India"); // return true or false

h.remove("India");

Iterator<String> i = h.iterator();
// Holds true till there is single element remaining
while (i.hasNext())
{
    System.out.println(i.next());
}

   


